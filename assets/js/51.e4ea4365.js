(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{523:function(s,t,a){"use strict";a.r(t);var e=a(31),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",[s._v("react fiber")])]),s._v(" "),a("h2",{attrs:{id:"为什么-react16-采用-fiber-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-react16-采用-fiber-架构"}},[s._v("#")]),s._v(" 为什么 React16 采用 fiber 架构")]),s._v(" "),a("p",[s._v("当需要被渲染的节点很多时，有存在大量的 JS 计算，因为 GUI 渲染线程 和 JS 执行线程 是互斥的，所以在 JS 计算的时候就会停止浏览器界面渲染行为，导致页面感觉卡顿。React 15 版本的 Stack Reconciler 过程是基于树的深度遍历的递归过程（遇到自定义组件就会一直的递归下去，直到最原始的 HTML 标签），Stack Reconciler 的递归一旦进入调用栈就无法中断或暂停，如果当组件嵌套很深或数量极多，在 16ms 内无法完成就势必造成浏览器丢帧导致卡顿。")]),s._v(" "),a("p",[s._v("其解决方案就是将 同步的更新变成可中断的异步更新，但 15 版本架构不支持异步更新，所以 React 团队决定撸起袖子重写，折腾了两年多终于在 2017/3 发布了 V16 版本。")]),s._v(" "),a("h2",{attrs:{id:"fiber-node-结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-node-结构"}},[s._v("#")]),s._v(" Fiber Node 结构")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("FiberNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" WorkTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  pendingProps"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" mixed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  key"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  mode"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" TypeOfMode")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Instance")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// FiberNode类型，目前总有25种类型，常用的就是FunctionComponent 和 ClassComponent")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//和组件Element中的key一致")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("elementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Function|String|Symbol|Number|Object")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("stateNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//FiberRoot|DomElement|ReactComponentInstance等绑定的其他对象")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Fiber")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// FiberNode|null 父级FiberNode")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// FiberNode|null 第一个子FiberNode")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// FiberNode|null 相邻的下一个兄弟节点")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//当前父fiber中的位置")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ref "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//和组件Element中的ref一致")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pendingProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pendingProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Object 新的props")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("memoizedProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Object 处理后的新props")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("updateQueue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// UpdateQueue 即将要变更的状态")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("memoizedState "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//Object 处理后的新state")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("dependencies "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 普通模式，同步渲染，React15-16的生产环境使用")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 并发模式，异步渲染，React17的生产环境使用")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 严格模式，用来检测是否存在废弃API，React16-17开发环境使用")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 性能测试模式，用来检测哪里存在性能问题，React16-17开发环境使用")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Effects")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("flags "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" NoFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("subtreeFlags "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" NoFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("deletions "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// render阶段的diff过程检测到fiber的子节点如果有需要被删除的节点")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lanes "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" NoLanes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果fiber.lanes不为空，则说明该fiber节点有更新")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("childLanes "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" NoLanes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//判断当前子树是否有更新的重要依据，若有更新，则继续向下构建，否则直接复用已有的fiber树")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("alternate "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//FiberNode|null 候补节点，缓存之前的Fiber节点，与双缓存机制相关，后续讲解")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br")])]),a("p",[s._v("所有 fiber 对象都是 FiberNode 实例，通过 tag 来标识类型。通过 createFiber 初始化 FiberNode 节点，代码如下")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("createFiber")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" WorkTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  pendingProps"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" mixed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  key"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  mode"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" TypeOfMode")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FiberNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pendingProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"协调阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协调阶段"}},[s._v("#")]),s._v(" 协调阶段")]),s._v(" "),a("h3",{attrs:{id:"beginwork"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beginwork"}},[s._v("#")]),s._v(" beginWork")]),s._v(" "),a("ol",[a("li",[s._v("执行组件 render，获取返回的 jsx")])]),s._v(" "),a("ul",[a("li",[s._v("在 class 组件，会执行实例化，处理 state，调用挂载前生命周期钩子等等。最后执行 render，获取返回的 jsx。")]),s._v(" "),a("li",[s._v("在 function 组件，会执行组件的构造函数，里面包括了 hooks 的一系列调用，最后获取返回的 jsx。")])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("对返回的 jsx 执行 reconcile（也就是俗称的 diff），记录差异")])]),s._v(" "),a("ul",[a("li",[s._v("根据 diff 生成当前 fiber 的子节点，并标记上对应的 flag（更新、删除、移动）。")]),s._v(" "),a("li",[s._v("这个生成的子节点，会返回出去，赋值给 currentWorkFiber，然后上层函数 workLoopSync 进行下一轮遍历，执行这个新生成的 fiber 节点。")])]),s._v(" "),a("h3",{attrs:{id:"completework"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#completework"}},[s._v("#")]),s._v(" completeWork")]),s._v(" "),a("p",[s._v("当遍历到叶子节点，会执行 completeWork，对 fiber tree 进行一个回溯，回到这个叶子节点的父节点，在发现有 sibling 兄弟节点时，会将兄弟节点重新赋值给 currentWorkFiber，以便上层 workLoopSync 函数遍历。")]),s._v(" "),a("ol",[a("li",[s._v("生成 dom 节点，并把子孙 dom 节点插入进去。组成一个虚拟 dom 树")]),s._v(" "),a("li",[s._v("处理 props")]),s._v(" "),a("li",[s._v("把所有含有副作用的 fiber 节点用 firstEffect 和 lastEffect 链接起来，组成一个链表，以便在 commit 时去遍历执行。")])]),s._v(" "),a("h2",{attrs:{id:"提交阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交阶段"}},[s._v("#")]),s._v(" 提交阶段")]),s._v(" "),a("p",[s._v("在 completeWork 执行到 root 根节点时，证明所有的工作已经完成，就会执行 commitRoot，它又分为三个阶段：\n将上一个阶段计算出来的需要处理的副作用(Effects)(包括需要操作的 dom 更新和需要调用的生命周期钩子)一次性执行了。这个阶段必须同步执行（更准确应为调度），不能被打断。")]),s._v(" "),a("ol",[a("li",[s._v("before mutation(执行 dom 操作前)\n调用挂载前的生命周期钩子，比如 getSnapshotBeforeUpdate，调度 useEffect。")]),s._v(" "),a("li",[s._v("mutation(执行 dom 操作)\n执行 dom 操作，如果有组件被删除，那么还会调用被删除组件的 componentWilUnmount 或 useLayoutEffect 的销毁函数")]),s._v(" "),a("li",[s._v("layout(执行 dom 操作后)\n切换 fiber tree（将 workFiberTree 替换更新前的 currentRenderTree，也就是新节点树替换旧树）\n调用 componentDidUpdate | componentDidMount 或者 useLayoutEffect 的回调函数。\nlayout 结束后，执行之前调度的 useEffect 的创建和销毁函数。")])]),s._v(" "),a("p",[s._v("总结上文，fiberWorkFn——协调阶段，在 beginWork（深度优先遍历、diff 记录差异）和 completeWork 去交替执行每个 fiber，在 commitRoot 时，我们称之为提交阶段。")]),s._v(" "),a("h2",{attrs:{id:"workinprogress-双缓冲机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workinprogress-双缓冲机制"}},[s._v("#")]),s._v(" workInProgress 双缓冲机制")]),s._v(" "),a("p",[s._v("如何创建")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// This is used to create an alternate fiber to do work on.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createWorkInProgress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("current"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pendingProps"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("alternate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createFiber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n      current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      pendingProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mode\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 以下两句很关键")]),s._v("\n    workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("alternate "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("alternate "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// do something else ...")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// do something else ...")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// do something else ...")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("首先 workInProgress 一个 Fiber 节点，当前节点的 alternate 为空时，通过 createFiber 创建，每次状态更新都会产生新的 workInProgress Fiber 树，通过 current 与 workInProgress 的替换完成 dom 更新，简单来说当 workInProgress Tree 内存中构建完成后直接替换 Fiber Tree 的做法，就是刚刚提到的 双缓冲机制。")]),s._v(" "),a("h2",{attrs:{id:"整体流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整体流程"}},[s._v("#")]),s._v(" 整体流程")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("第一部分从 用户操作引起 setState 被调用以后，把接收的 React Element 转换为 Fiber 节点，并为其设置优先级，创建 Update，根据 Fiber 的优先级加入到 Update 相应的位置，这部分主要是做一些初始数据的准备。")])]),s._v(" "),a("li",[a("p",[s._v("第二部分主要是三个函数：scheduleWork、requestWork、performWork，即调度工作、申请工作、正式工作三部曲，React 16 新增的异步调度的功能则在这部分实现，这部分就是 Schedule 阶段，完成调度主要靠 scheduleCallbackWithExpriation 这个方法。scheduleCallbackWithExpriation 这个方法在不同环境，实现不一样，chrome 等览器中使用 requestIdleCallback API，没有这个 API 的浏览器中，通过 requestAnimationFrame 模拟一个 requestIdleCallback，任务调度的过程是：在任务队列中选出高优先级的 fiber node 执行，调用 requestIdleCallback 获取所剩时间，若执行时间超过了 deathLine，或者突然插入更高优先级的任务，则执行中断，保存当前结果，修改 tag 标记一下，设置为 pending 状态，迅速收尾并再调用一个 requestIdleCallback，等主线程释放出来再继续。执行到 performWorkOnRoot 时，第二部分结束。")])]),s._v(" "),a("li",[a("p",[s._v("第三部分基本就是 Fiber Reconciler ，分为 2 个阶段:第一阶段 Render/recocilation Phase（协调阶段），遍历所有的 Fiber 节点，通过 Diff 算法计算所有更新工作，产出 EffectList 给到 commit Phase 使用，这部分的核心是 beginWork 函数；然后进入 Commit Phase（提交阶段），这个阶段不能被打断，不再赘述。")])])]),s._v(" "),a("h2",{attrs:{id:"任务调度的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务调度的过程"}},[s._v("#")]),s._v(" 任务调度的过程")]),s._v(" "),a("p",[s._v("在任务队列中选出高优先级的 fiber node 执行，调用 requestIdleCallback 获取所剩时间，若执行时间超过了 deathLine，或者突然插入更高优先级的任务，则执行中断，保存当前结果，修改 fiber node 的 tag 标记，设置为 pending 状态，迅速收尾并再调用一个 requestIdleCallback，等主线程释放出来再继续恢复任务执行时，检查 tag 是被中断的任务，会接着继续做任务或者重做。")]),s._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("react 的组件架构是由一个个 fiber 组成的树组成，他的工作流程就是遍历 fiber tree 去执行每一个工作单元。分为协调阶段(深度遍历并 diff 产生新树、执行 hooks 链表并收集 effect 并链成链表）和提交阶段（处理 effect 链表，执行完毕切换渲染树）。")]),s._v(" "),a("p",[s._v("fiber 有新旧两棵树，一个是 current fiber，是已经渲染在界面上的。一个是 work fiber，由当前的更新触发而在内存中构建的。构建完成，work fiber 就会替换 cur fiber，然后经过提交阶段完成更新，在 dom 操作完成后渲染到界面上。")]),s._v(" "),a("p",[s._v("一个页面就是一个 fiber，这个页面的 child 就是 render 函数中的组件或者 element，都会有他们自己的 sibling,child,return(父级)，如果是 hook 组件会在该 fiber 中的 memoizedState 属性保存它自己的 hooks 链表，在协调阶段通过执行 hooks 链表得到 effect 链表。协调阶段时，requestIdleCallback 在主线程的空闲期执行低优先级的任务，requestAnimationFrame 执行高优先级任务，requestIdleCallback 执行完一个 fiber 的更新后，若下一个任务执行时间超过了 deathLine，或者突然插入更高优先级的任务，则执行中断，保存当前结果，修改 fiber node 的 tag 标记，设置为 pending 状态，恢复任务执行时，检查 tag 是被中断的任务，会接着继续做任务或者重做。当全部完成时进入提交阶段在提交阶段（不能被打断、同步、遍历）执行 effect 链表、调度 Effect、操作 DOM、执行周期函数，完成切换、渲染。")])])}),[],!1,null,null,null);t.default=n.exports}}]);