(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{505:function(s,a,e){s.exports=e.p+"assets/img/babel.a9766316.png"},506:function(s,a,e){s.exports=e.p+"assets/img/vue.8a6d7078.png"},567:function(s,a,e){"use strict";e.r(a);var t=e(31),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",[s._v("抽象语法树 (Abstract Syntax Tree)，简称 AST，它是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。")])]),s._v(" "),t("h1",{attrs:{id:"ast-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ast-介绍"}},[s._v("#")]),s._v(" AST 介绍")]),s._v(" "),t("p",[s._v("AST 官方介绍")]),s._v(" "),t("p",[s._v("It is a hierarchical program representation that presents source code structure according to the grammar of a programming language, each AST node corresponds to an item of a source code.")]),s._v(" "),t("p",[s._v("如果你查看目前任何主流的项目中的 devDependencies，会发现前些年的不计其数的插件诞生。我们归纳一下有：javascript 转译、代码压缩、css 预处理器、elint、pretiier，等。有很多 js 模块我们不会在生产环境用到，但是它们在我们的开发过程中充当着重要的角色。所有的上述工具，不管怎样，都建立在了 AST 这个巨人的肩膀上。")]),s._v(" "),t("h1",{attrs:{id:"ast-有什么用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ast-有什么用"}},[s._v("#")]),s._v(" AST 有什么用")]),s._v(" "),t("ul",[t("li",[s._v("代码语法的检查、代码风格的检查、代码的格式化、代码的高亮、代码错误提示、代码自动补全等等\n"),t("ul",[t("li",[s._v("如 JSLint、JSHint 对代码错误或风格的检查，发现一些潜在的错误")]),s._v(" "),t("li",[s._v("IDE 的错误提示、格式化、高亮、自动补全等等")])])]),s._v(" "),t("li",[s._v("代码混淆压缩\n"),t("ul",[t("li",[s._v("UglifyJS2 等")])])]),s._v(" "),t("li",[s._v("优化变更代码，改变代码结构使达到想要的结构\n"),t("ul",[t("li",[s._v("代码打包工具 webpack、rollup 等等")]),s._v(" "),t("li",[s._v("CommonJS、AMD、CMD、UMD 等代码规范之间的转化")]),s._v(" "),t("li",[s._v("CoffeeScript、TypeScript、JSX 等转化为原生 Javascript")])])])]),s._v(" "),t("h1",{attrs:{id:"ast-如何生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ast-如何生成"}},[s._v("#")]),s._v(" AST 如何生成")]),s._v(" "),t("p",[s._v("js 执行的第一步是读取 js 文件中的字符流，然后通过词法分析生成 token，之后再通过语法分析( Parser )生成 AST，最后生成机器码执行。\n整个解析过程主要分为以下两个步骤：")]),s._v(" "),t("ul",[t("li",[s._v("词法分析：将整个代码字符串分割成最小语法单元数组")]),s._v(" "),t("li",[s._v("语法分析：在分词基础上建立分析语法单元之间的关系")])]),s._v(" "),t("p",[s._v("JS Parser 是 js 语法解析器，它可以将 js 源码转成 AST，常见的 Parser 有 esprima、traceur、acorn、shift 等。")]),s._v(" "),t("h2",{attrs:{id:"词法分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#词法分析"}},[s._v("#")]),s._v(" 词法分析")]),s._v(" "),t("p",[s._v("词法分析，也称之为扫描（scanner），简单来说就是调用 next() 方法，一个一个字母的来读取字符，然后与定义好的 JavaScript 关键字符做比较，生成对应的 Token。Token 是一个不可分割的最小单元:")]),s._v(" "),t("blockquote",[t("p",[s._v("例如 var 这三个字符，它只能作为一个整体，语义上不能再被分解，因此它是一个 Token。")])]),s._v(" "),t("p",[s._v("词法分析器里，每个关键字是一个 Token ，每个标识符是一个 Token，每个操作符是一个 Token，每个标点符号也都是一个 Token。除此之外，还会过滤掉源程序中的注释和空白字符（换行符、空格、制表符等。\n最终，整个代码将被分割进一个 tokens 列表（或者说一维数组）。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('n * n;\n\n[\n  { type: { ... }, value: "n",  loc: { ... } },\n  { type: { ... }, value: "*",  loc: { ... } },\n  { type: { ... }, value: "n",  loc: { ... } },\n  ...\n]\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("每一个 type 有一组属性来描述该令牌：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("{\n  type: {\n    label: 'name',\n    keyword: undefined,\n    beforeExpr: false,\n    startsExpr: true,\n    rightAssociative: false,\n    isLoop: false,\n    isAssign: false,\n    prefix: false,\n    postfix: false,\n    binop: null,\n    updateContext: null\n  },\n  ...\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h2",{attrs:{id:"语法分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法分析"}},[s._v("#")]),s._v(" 语法分析")]),s._v(" "),t("p",[s._v("语法分析会将词法分析出来的 Token 转化成有语法含义的抽象语法树结构。同时，验证语法，语法如果有错的话，抛出语法错误。")]),s._v(" "),t("ul",[t("li",[s._v("可以去 "),t("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[s._v("AST explorer"),t("OutboundLink")],1),s._v(" 可以在线看到不同的 parser 解析 js 代码后得到的 AST。")]),s._v(" "),t("li",[s._v("github 上看所有的 "),t("a",{attrs:{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"}},[s._v("ESTree"),t("OutboundLink")],1),s._v(" ESTree")]),s._v(" "),t("li",[s._v("关于属性介绍的文档 抽象语法树 "),t("a",{attrs:{href:"http://www.goyth.com/2018/12/23/AST/#Expressions",target:"_blank",rel:"noopener noreferrer"}},[s._v("AST"),t("OutboundLink")],1),s._v(" 介绍")])]),s._v(" "),t("h1",{attrs:{id:"ast-解析过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ast-解析过程"}},[s._v("#")]),s._v(" AST 解析过程")]),s._v(" "),t("ol",[t("li",[s._v("词法分析，也叫扫描 scanner")])]),s._v(" "),t("p",[s._v("它读取我们的代码，然后把它们按照预定的规则合并成一个个的标识 tokens。同时，它会移除空白符、注释等。最后，整个代码将被分割进一个 tokens 列表（或者说一维数组）。")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 转换成")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'const'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'keyword'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'identifier'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("当词法分析源代码的时候，它会一个一个字母地读取代码，所以很形象地称之为扫描 - scans。当它遇到空格、操作符，或者特殊符号的时候，它会认为一个话已经完成了。")]),s._v(" "),t("p",[s._v("2.语法分析，也称解析器")]),s._v(" "),t("p",[s._v("它会将词法分析出来的数组转换成树形的形式，同时，验证语法。语法如果有错的话，抛出语法错误。")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'const'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'keyword'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'identifier'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 语法分析后的树形形式")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"VariableDeclarator"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  id"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Identifier"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("当生成树的时候，解析器会删除一些没必要的标识 tokens（比如：不完整的括号），因此 AST 不是 100% 与源码匹配的。")]),s._v(" "),t("blockquote",[t("p",[s._v("解析器 100%覆盖所有代码结构生成树叫做 CST（具体语法树）。")])]),s._v(" "),t("h1",{attrs:{id:"ast-实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ast-实战"}},[s._v("#")]),s._v(" AST 实战")]),s._v(" "),t("p",[s._v("人生第一次拆解 Javascript")]),s._v(" "),t("p",[s._v("小时候，当我们拿到一个螺丝刀和一台机器，人生中最令人怀念的梦幻时刻便开始了：")]),s._v(" "),t("p",[s._v("我们把机器，拆成一个一个小零件，一个个齿轮与螺钉，用巧妙的机械原理衔接在一起…")]),s._v(" "),t("p",[s._v("当我们把它重新照不同的方式组装起来，这时，机器重新又跑动了起来——世界在你眼中如获新生。")]),s._v(" "),t("p",[s._v("通过抽象语法树解析，我们可以像童年时拆解玩具一样，透视 Javascript 这台机器的运转，并且重新按着你的意愿来组装。")]),s._v(" "),t("p",[s._v("现在，我们拆解一个简单的 add 函数")]),s._v(" "),t("div",{staticClass:"language-javascrtip line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function add(a, b) {\n  return a + b\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("首先，我们拿到的这个语法块，是一个 FunctionDeclaration(函数定义)对象。")]),s._v(" "),t("p",[s._v("用力拆开，它成了三块：")]),s._v(" "),t("p",[s._v("一个 id，就是它的名字，即 add")]),s._v(" "),t("p",[s._v("两个 params，就是它的参数，即[a, b]")]),s._v(" "),t("p",[s._v("一块 body，也就是大括号内的一堆东西")]),s._v(" "),t("p",[s._v("add 没办法继续拆下去了，它是一个最基础 Identifier（标志）对象，用来作为函数的唯一标志，就像人的姓名一样。")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 'add'\n  type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 'identifier'\n  ...\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("params 继续拆下去，其实是两个 Identifier 组成的数组。之后也没办法拆下去了。")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 'a'\n    type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 'identifier'\n    ...\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 'b'\n    type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 'identifier'\n    ...\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("接下来，我们继续拆开 body")]),s._v(" "),t("p",[s._v("我们发现，body 其实是一个 BlockStatement（块状域）对象，用来表示是{return a + b}")]),s._v(" "),t("p",[s._v("打开 Blockstatement，里面藏着一个 ReturnStatement（Return 域）对象，用来表示 return a + b")]),s._v(" "),t("p",[s._v("继续打开 ReturnStatement,里面是一个 BinaryExpression(二项式)对象，用来表示 a + b")]),s._v(" "),t("p",[s._v("继续打开 BinaryExpression，它成了三部分，left，operator，right")]),s._v(" "),t("p",[s._v("operator 即+")]),s._v(" "),t("p",[s._v("left 里面装的，是 Identifier 对象 a")]),s._v(" "),t("p",[s._v("right 里面装的，是 Identifer 对象 b")]),s._v(" "),t("p",[s._v("就这样，我们把一个简单的 add 函数拆解完毕，用图表示就是")]),s._v(" "),t("p",[s._v("看！抽象语法树(Abstract Syntax Tree)，的确是一种标准的树结构。")]),s._v(" "),t("p",[s._v("那么，上面我们提到的 Identifier、Blockstatement、ReturnStatement、BinaryExpression， 见附录")]),s._v(" "),t("h2",{attrs:{id:"babel-实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-实战"}},[s._v("#")]),s._v(" babel 实战")]),s._v(" "),t("p",[s._v("babel 是一个 javascript 编译器，用来将 es6 语法编译成 es5")]),s._v(" "),t("p",[t("img",{attrs:{src:e(505),alt:"babel解析过程"}})]),s._v(" "),t("p",[s._v("babel 的工作可以分为 3 个阶段：")]),s._v(" "),t("p",[s._v("第 1 步 解析（Parse）")]),s._v(" "),t("ul",[t("li",[s._v("@babel/parser：将字符串转换成 AST，Babylon( 现在是@babel/parser ) 是 Babel 中使用的 JavaScript 解析器")]),s._v(" "),t("li",[s._v("解析过程分为两个阶段\n"),t("ul",[t("li",[s._v("语法分析：字符流 -> token 流")]),s._v(" "),t("li",[s._v("词法分析：token 流 -> AST")])])]),s._v(" "),t("li",[t("a",{attrs:{href:"https://babeljs.io/docs/en/babel-parser#docsNav",target:"_blank",rel:"noopener noreferrer"}},[s._v("@babel/parser"),t("OutboundLink")],1)])]),s._v(" "),t("p",[s._v("第 2 步 转换（TransForm）")]),s._v(" "),t("ul",[t("li",[s._v("@babel/traverse：主要用于遍历 AST")]),s._v(" "),t("li",[s._v("Babel 接收解析得到的 AST 并通过 ( babel-traverse ) 对其进行 ( 深度优先遍历 )\n"),t("ul",[t("li",[s._v("在此遍历过程中对节点进行 ( 添加 )、( 更新 ) 及 ( 移除 ) 操作")])])]),s._v(" "),t("li",[s._v("@babel/types：主要用来操作 AST，比如 ( 添加 )、( 更新 ) 及 ( 移除 ) 操作")]),s._v(" "),t("li",[s._v("除了手动替换，可以使用@babel/types 更加房便快捷.相当于作用于 AST 的类 lodash 库")])]),s._v(" "),t("p",[s._v("第 3 步 生成（Generate）")]),s._v(" "),t("ul",[t("li",[s._v("@babel/generator：来将转换后的抽象语法树转化为 Javascript 字符串\n"),t("ul",[t("li",[s._v("将经过转换的 AST 通过 babel-generator 再转换为 js 代码过程及时深度遍历整个 AST,然后构建转换后的代码字符串。")])])]),s._v(" "),t("li",[s._v("@babel/generator")])]),s._v(" "),t("h2",{attrs:{id:"vue-实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-实战"}},[s._v("#")]),s._v(" Vue 实战")]),s._v(" "),t("p",[t("img",{attrs:{src:e(506),alt:"Vue解析过程"}})]),s._v(" "),t("h2",{attrs:{id:"eslint-实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eslint-实战"}},[s._v("#")]),s._v(" ESlint 实战")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.im/post/6844903961804161031",target:"_blank",rel:"noopener noreferrer"}},[s._v("在 Eslint 中开发禁用 console.time()"),t("OutboundLink")],1)]),s._v(" "),t("h1",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("AST 的作用大致分为几类")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("IDE 使用，如代码风格检测(eslint 等)、代码的格式化，代码高亮，代码错误等等")])]),s._v(" "),t("li",[t("p",[s._v("代码的混淆压缩")])]),s._v(" "),t("li",[t("p",[s._v("转换代码的工具。如 webpack，rollup，各种代码规范之间的转换，ts，jsx 等转换为原生 js")])])]),s._v(" "),t("p",[s._v("了解 AST，最终还是为了让我们了解我们使用的工具，当然也让我们更了解 JavaScript，更靠近 JavaScript。")]),s._v(" "),t("h1",{attrs:{id:"附录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[s._v("#")]),s._v(" 附录")]),s._v(" "),t("h2",{attrs:{id:"ast-常用节点介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ast-常用节点介绍"}},[s._v("#")]),s._v(" AST 常用节点介绍")]),s._v(" "),t("h3",{attrs:{id:"identifier"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#identifier"}},[s._v("#")]),s._v(" Identifier")]),s._v(" "),t("p",[s._v("标识符，就是我们写 JS 时自定义的名称，如变量名，函数名，属性名，都归为标识符。相应的接口是这样的：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface Identifier <: Expression, Pattern {\n  type: "Identifier";\n  name: string;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("一个标识符可能是一个表达式，或者是解构的模式（ES6 中的解构语法）。我们等会会看到 Expression 和 Pattern 相关的内容的。")]),s._v(" "),t("h3",{attrs:{id:"literal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#literal"}},[s._v("#")]),s._v(" Literal")]),s._v(" "),t("p",[s._v("字面量，这里不是指 [] 或者 {} 这些，而是本身语义就代表了一个值的字面量，如 1，“hello”, true 这些，还有正则表达式（有一个扩展的 Node 来表示正则表达式），如 /\\d?/。我们看一下文档的定义：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface Literal <: Expression {\n  type: "Literal";\n  value: string | boolean | null | number | RegExp;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这里即对应了字面量的值，我们可以看出字面量值的类型，字符串，布尔，数值，null 和正则。")]),s._v(" "),t("h3",{attrs:{id:"regexpliteral"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexpliteral"}},[s._v("#")]),s._v(" RegExpLiteral")]),s._v(" "),t("p",[s._v("这个针对正则字面量的，为了更好地来解析正则表达式的内容，添加多一个 regex 字段，里边会包括正则本身，以及正则的 flags。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("interface RegExpLiteral <: Literal {\n  regex: {\n    pattern: string;\n    flags: string;\n  };\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"programs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#programs"}},[s._v("#")]),s._v(" Programs")]),s._v(" "),t("p",[s._v("一般这个是作为跟节点的，即代表了一棵完整的程序代码树。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface Program <: Node {\n  type: "Program";\n  body: [ Statement ];\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("body 属性是一个数组，包含了多个 Statement（即语句）节点。")]),s._v(" "),t("h3",{attrs:{id:"functions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[s._v("#")]),s._v(" Functions")]),s._v(" "),t("p",[s._v("函数声明或者函数表达式节点。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("interface Function <: Node {\n  id: Identifier | null;\n  params: [ Pattern ];\n  body: BlockStatement;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("id 是函数名，params 属性是一个数组，表示函数的参数。body 是一个块语句。")]),s._v(" "),t("h3",{attrs:{id:"blockstatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#blockstatement"}},[s._v("#")]),s._v(" BlockStatement")]),s._v(" "),t("p",[s._v("块语句节点，举个例子：if (...) { // 这里是块语句的内容 }，块里边可以包含多个其他的语句，所以有一个 body 属性，是一个数组，表示了块里边的多个语句。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface BlockStatement <: Statement {\n  type: "BlockStatement";\n  body: [ Statement ];\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"debuggerstatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#debuggerstatement"}},[s._v("#")]),s._v(" DebuggerStatement")]),s._v(" "),t("p",[s._v("debugger，就是表示这个，没有其他了。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface DebuggerStatement <: Statement {\n  type: "DebuggerStatement";\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"withstatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#withstatement"}},[s._v("#")]),s._v(" WithStatement")]),s._v(" "),t("p",[s._v("with 语句节点，里边有两个特别的属性，object 表示 with 要使用的那个对象（可以是一个表达式），body 则是对应 with 后边要执行的语句，一般会是一个块语句。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface WithStatement <: Statement {\n  type: "WithStatement";\n  object: Expression;\n  body: Statement;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("hr"),s._v(" "),t("p",[t("strong",[s._v("下边是控制流的语句：")])]),s._v(" "),t("h3",{attrs:{id:"returnstatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returnstatement"}},[s._v("#")]),s._v(" ReturnStatement")]),s._v(" "),t("p",[s._v("返回语句节点，argument 属性是一个表达式，代表返回的内容。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface ReturnStatement <: Statement {\n  type: "ReturnStatement";\n  argument: Expression | null;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"breakstatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#breakstatement"}},[s._v("#")]),s._v(" BreakStatement")]),s._v(" "),t("p",[s._v("break 语句节点，会有一个 label 属性表示需要的 label 名称，当不需要 label 的时候（通常都不需要），便是 null。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface BreakStatement <: Statement {\n  type: "BreakStatement";\n  label: Identifier | null;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"continuestatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#continuestatement"}},[s._v("#")]),s._v(" ContinueStatement")]),s._v(" "),t("p",[s._v("continue 语句节点，和 break 类似。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface ContinueStatement <: Statement {\n  type: "ContinueStatement";\n  label: Identifier | null;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("hr"),s._v(" "),t("p",[t("strong",[s._v("下边是条件语句：")])]),s._v(" "),t("h3",{attrs:{id:"ifstatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ifstatement"}},[s._v("#")]),s._v(" IfStatement")]),s._v(" "),t("p",[s._v("if 语句节点，很常见，会带有三个属性，test 属性表示 if (...) 括号中的表达式。\nconsequent 属性是表示条件为 true 时的执行语句，通常会是一个块语句。\nalternate 属性则是用来表示 else 后跟随的语句节点，通常也会是块语句，但也可以又是一个 if 语句节点，即类似这样的结构：if (a) { //... } else if (b) { // ... }。alternate 当然也可以为 null。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface IfStatement <: Statement {\n  type: "IfStatement";\n  test: Expression;\n  consequent: Statement;\n  alternate: Statement | null;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"switchstatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#switchstatement"}},[s._v("#")]),s._v(" SwitchStatement")]),s._v(" "),t("p",[s._v("switch 语句节点，有两个属性，discriminant 属性表示 switch 语句后紧随的表达式，通常会是一个变量，cases 属性是一个 case 节点的数组，用来表示各个 case 语句。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface SwitchStatement <: Statement {\n  type: "SwitchStatement";\n  discriminant: Expression;\n  cases: [ SwitchCase ];\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"switchcase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#switchcase"}},[s._v("#")]),s._v(" SwitchCase")]),s._v(" "),t("p",[s._v("switch 的 case 节点。test 属性代表这个 case 的判断表达式，consequent 则是这个 case 的执行语句。\n当 test 属性是 null 时，则是表示 default 这个 case 节点。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface SwitchCase <: Node {\n  type: "SwitchCase";\n  test: Expression | null;\n  consequent: [ Statement ];\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("hr"),s._v(" "),t("p",[t("strong",[s._v("下边是异常相关的语句：")])]),s._v(" "),t("h3",{attrs:{id:"throwstatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#throwstatement"}},[s._v("#")]),s._v(" ThrowStatement")]),s._v(" "),t("p",[s._v("throw 语句节点，argument 属性用以表示 throw 后边紧跟的表达式。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface ThrowStatement <: Statement {\n  type: "ThrowStatement";\n  argument: Expression;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"trystatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trystatement"}},[s._v("#")]),s._v(" TryStatement")]),s._v(" "),t("p",[s._v("try 语句节点，block 属性表示 try 的执行语句，通常是一个块语句。\nhanlder 属性是指 catch 节点，finalizer 是指 finally 语句节点，当 hanlder 为 null 时，finalizer 必须是一个块语句节点。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface TryStatement <: Statement {\n  type: "TryStatement";\n  block: BlockStatement;\n  handler: CatchClause | null;\n  finalizer: BlockStatement | null;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"catchclause"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#catchclause"}},[s._v("#")]),s._v(" CatchClause")]),s._v(" "),t("p",[s._v("catch 节点，param 用以表示 catch 后的参数，body 则表示 catch 后的执行语句，通常是一个块语句。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface CatchClause <: Node {\n  type: "CatchClause";\n  param: Pattern;\n  body: BlockStatement;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("hr"),s._v(" "),t("p",[t("strong",[t("em",[s._v("下边是循环语句：")])])]),s._v(" "),t("h3",{attrs:{id:"whilestatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#whilestatement"}},[s._v("#")]),s._v(" WhileStatement")]),s._v(" "),t("p",[s._v("while 语句节点，test 表示括号中的表达式，body 是表示要循环执行的语句。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface WhileStatement <: Statement {\n  type: "WhileStatement";\n  test: Expression;\n  body: Statement;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"dowhilestatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dowhilestatement"}},[s._v("#")]),s._v(" DoWhileStatement")]),s._v(" "),t("p",[s._v("do/while 语句节点，和 while 语句类似。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface DoWhileStatement <: Statement {\n  type: "DoWhileStatement";\n  body: Statement;\n  test: Expression;\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"forstatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#forstatement"}},[s._v("#")]),s._v(" ForStatement")]),s._v(" "),t("p",[s._v("for 循环语句节点，属性 init/test/update 分别表示了 for 语句括号中的三个表达式，初始化值，循环判断条件，每次循环执行的变量更新语句（init 可以是变量声明或者表达式）。这三个属性都可以为 null，即 for(;😉{}。body 属性用以表示要循环执行的语句。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface ForStatement <: Statement {\n  type: "ForStatement";\n  init: VariableDeclaration | Expression | null;\n  test: Expression | null;\n  update: Expression | null;\n  body: Statement;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"forinstatement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#forinstatement"}},[s._v("#")]),s._v(" ForInStatement")]),s._v(" "),t("p",[s._v("for/in 语句节点，left 和 right 属性分别表示在 in 关键词左右的语句（左侧可以是一个变量声明或者表达式）。body 依旧是表示要循环执行的语句。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface ForInStatement <: Statement {\n  type: "ForInStatement";\n  left: VariableDeclaration | Pattern;\n  right: Expression;\n  body: Statement;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"variabledeclaration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variabledeclaration"}},[s._v("#")]),s._v(" VariableDeclaration")]),s._v(" "),t("p",[s._v("变量声明，kind 属性表示是什么类型的声明，因为 ES6 引入了 const/let。declarations 表示声明的多个描述，因为我们可以这样：let a = 1, b = 2;。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface VariableDeclaration <: Declaration {\n  type: "VariableDeclaration";\n  declarations: [ VariableDeclarator ];\n  kind: "var";\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"variabledeclarator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variabledeclarator"}},[s._v("#")]),s._v(" VariableDeclarator")]),s._v(" "),t("p",[s._v("变量声明的描述，id 表示变量名称节点，init 表示初始值的表达式，可以为 null。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface VariableDeclarator <: Node {\n  type: "VariableDeclarator";\n  id: Pattern;\n  init: Expression | null;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"thisexpression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#thisexpression"}},[s._v("#")]),s._v(" ThisExpression")]),s._v(" "),t("p",[s._v("表示 this。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface ThisExpression <: Expression {\n  type: "ThisExpression";\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"arrayexpression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arrayexpression"}},[s._v("#")]),s._v(" ArrayExpression")]),s._v(" "),t("p",[s._v("数组表达式节点，elements 属性是一个数组，表示数组的多个元素，每一个元素都是一个表达式节点。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface ArrayExpression <: Expression {\n  type: "ArrayExpression";\n  elements: [ Expression | null ];\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"objectexpression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#objectexpression"}},[s._v("#")]),s._v(" ObjectExpression")]),s._v(" "),t("p",[s._v("对象表达式节点，property 属性是一个数组，表示对象的每一个键值对，每一个元素都是一个属性节点。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface ObjectExpression <: Expression {\n  type: "ObjectExpression";\n  properties: [ Property ];\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"property"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#property"}},[s._v("#")]),s._v(" Property")]),s._v(" "),t("p",[s._v("对象表达式中的属性节点。key 表示键，value 表示值，由于 ES5 语法中有 get/set 的存在，所以有一个 kind 属性，用来表示是普通的初始化，或者是 get/set。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface Property <: Node {\n  type: "Property";\n  key: Literal | Identifier;\n  value: Expression;\n  kind: "init" | "get" | "set";\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"functionexpression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#functionexpression"}},[s._v("#")]),s._v(" FunctionExpression")]),s._v(" "),t("p",[s._v("函数表达式节点。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface FunctionExpression <: Function, Expression {\n  type: "FunctionExpression";\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("hr"),s._v(" "),t("p",[t("strong",[s._v("下边是一元运算符相关的表达式部分：")])]),s._v(" "),t("h3",{attrs:{id:"unaryoperator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unaryoperator"}},[s._v("#")]),s._v(" UnaryOperator")]),s._v(" "),t("p",[s._v("一元运算符，枚举类型，所有值如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('enum UnaryOperator {\n  "-" | "+" | "!" | "~" | "typeof" | "void" | "delete"\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"updateoperator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#updateoperator"}},[s._v("#")]),s._v(" UpdateOperator")]),s._v(" "),t("p",[s._v("update 运算符，值为 ++ 或 --，配合 update 表达式节点的 prefix 属性来表示前后。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('enum UpdateOperator {\n  "++" | "--"\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("hr"),s._v(" "),t("p",[t("strong",[s._v("下边是二元运算符相关的表达式部分：")])]),s._v(" "),t("h3",{attrs:{id:"binaryexpression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binaryexpression"}},[s._v("#")]),s._v(" BinaryExpression")]),s._v(" "),t("p",[s._v("二元运算表达式节点，left 和 right 表示运算符左右的两个表达式，operator 表示一个二元运算符。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface BinaryExpression <: Expression {\n  type: "BinaryExpression";\n  operator: BinaryOperator;\n  left: Expression;\n  right: Expression;\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"binaryoperator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binaryoperator"}},[s._v("#")]),s._v(" BinaryOperator")]),s._v(" "),t("p",[s._v("二元运算符，所有值如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('enum BinaryOperator {\n  "==" | "!=" | "===" | "!=="\n  | "<" | "<=" | ">" | ">="\n  | "<<" | ">>" | ">>>"\n  | "+" | "-" | "\\*" | "/" | "%"\n  | "|" | "^" | "&" | "in"\n  | "instanceof"\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"assignmentexpression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assignmentexpression"}},[s._v("#")]),s._v(" AssignmentExpression")]),s._v(" "),t("p",[s._v("赋值表达式节点，operator 属性表示一个赋值运算符，left 和 right 是赋值运算符左右的表达式。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface AssignmentExpression <: Expression {\n  type: "AssignmentExpression";\n  operator: AssignmentOperator;\n  left: Pattern | Expression;\n  right: Expression;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"assignmentoperator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assignmentoperator"}},[s._v("#")]),s._v(" AssignmentOperator")]),s._v(" "),t("p",[s._v("赋值运算符，所有值如下：（常用的并不多）")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('enum AssignmentOperator {\n  "=" | "+=" | "-=" | "\\*=" | "/=" | "%="\n  | "<<=" | ">>=" | ">>>="\n  | "|=" | "^=" | "&="\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"logicaloperator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logicaloperator"}},[s._v("#")]),s._v(" LogicalOperator")]),s._v(" "),t("p",[s._v("逻辑运算符，两种值，即与 或。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('enum LogicalOperator {\n  "||" | "&&"\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"conditionalexpression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalexpression"}},[s._v("#")]),s._v(" ConditionalExpression")]),s._v(" "),t("p",[s._v("条件表达式，通常我们称之为三元运算表达式，即 boolean ? true : false。属性参考条件语句。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface ConditionalExpression <: Expression {\n  type: "ConditionalExpression";\n  test: Expression;\n  alternate: Expression;\n  consequent: Expression;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"callexpression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#callexpression"}},[s._v("#")]),s._v(" CallExpression")]),s._v(" "),t("p",[s._v("函数调用表达式，即表示了 func(1, 2) 这一类型的语句。callee 属性是一个表达式节点，表示函数，arguments 是一个数组，元素是表达式节点，表示函数参数列表。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface CallExpression <: Expression {\n  type: "CallExpression";\n  callee: Expression;\n  arguments: [ Expression ];\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"newexpression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#newexpression"}},[s._v("#")]),s._v(" NewExpression")]),s._v(" "),t("p",[s._v("new 表达式。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('interface NewExpression <: CallExpression {\n  type: "NewExpression";\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);